
package DP_project;

import java.awt.Color;
import java.util.HashMap;
import java.util.Map.Entry;
import javax.swing.ImageIcon;
import javax.swing.JProgressBar;
import javax.swing.UIManager;

import CrawlerComponents.AskButton;
import CrawlerComponents.BingButton;
import CrawlerComponents.FileTable;
import CrawlerComponents.GoogleButton;
import CrawlerComponents.YahooButtons;
import Interfaces.Command;
import Interfaces.Observer;
import Interfaces.Visitor;

/**
 *
 * @author Michael
 */
@SuppressWarnings("serial")
public class Project extends javax.swing.JFrame implements Visitor ,Observer{

	final String imageFoldePath = "C:\\Users\\Michael\\Documents\\NetBeansProjects\\JavaApplication1\\img\\";
	Crawler crawler;
	private boolean dbIsFull=true;
	private static Thread crawlerT;
	private static Thread cheackT;
	boolean stop = false;


	/**
	 * Creates new form Project
	 */
	public Project() {


		initComponents();
		ImageIcon imgBing = new ImageIcon("img/bing.png");
		bingButton.setIcon(imgBing);
		ImageIcon imgYahoo = new ImageIcon("img/yahoo.png");
		yahooButtons.setIcon(imgYahoo);
		ImageIcon imgAsk = new ImageIcon("img/ask.png");
		askButton.setIcon(imgAsk);
		ImageIcon imgGoogle = new ImageIcon("img/google.png");
		googleButton.setIcon(imgGoogle);

		jB_Download.setBackground(Color.GREEN);
		DB.createDB().registerObserver(this);

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {


		jB_Download = new javax.swing.JButton();
		jT_FileToSearch = new javax.swing.JTextField();
		jC_pdf = new javax.swing.JCheckBox();
		jC_doc = new javax.swing.JCheckBox();
		jC_xls = new javax.swing.JCheckBox();

		ProgressBar = new javax.swing.JProgressBar();
		jB_clear = new javax.swing.JButton();

		menuBar = new javax.swing.JMenuBar();
		jMenuFileTable = new javax.swing.JMenu();

		components=new HashMap<String,Command>();


		askButton =new AskButton();
		bingButton=new BingButton() ;
		googleButton=new GoogleButton();
		yahooButtons=new YahooButtons();

		fileTable = new FileTable("Table");

		components.put("fileTable", fileTable);
		components.put("askButton", askButton);
		components.put("bingButton", bingButton);
		components.put("googleButton", googleButton);
		components.put("yahooButtons", yahooButtons);

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);



		fileTable.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				components.get("fileTable").exec();
			}
		});

		jB_Download.setText("Download");
		jB_Download.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jB_DownloadActionPerformed(evt);
			}
		});

		jC_pdf.setSelected(true);
		jC_pdf.setText("pdf");
		jC_pdf.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jC_pdfActionPerformed(evt);
			}
		});

		jC_doc.setText("doc");
		jC_doc.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jC_docActionPerformed(evt);
			}
		});

		jC_xls.setText("xls");
		jC_xls.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jC_xlsActionPerformed(evt);
			}
		});

		jB_clear.setText("Clear");
		jB_clear.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});

		bingButton.setIcon(new javax.swing.ImageIcon(imageFoldePath+"bing.png")); 
		bingButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				components.get("bingButton").exec();
			}
		});

		yahooButtons.setIcon(new javax.swing.ImageIcon(imageFoldePath+"yahoo.png")); 
		yahooButtons.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				components.get("yahooButtons").exec();
			}
		});

		askButton.setIcon(new javax.swing.ImageIcon(imageFoldePath+"ask.png")); 
		askButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				components.get("askButton").exec();
			}
		});

		googleButton.setIcon(new javax.swing.ImageIcon(imageFoldePath+"google.png")); 
		googleButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				components.get("googleButton").exec();
			}
		});


		jMenuFileTable.setText("Files");
		jMenuFileTable.add(fileTable);
		menuBar.add(jMenuFileTable);


		setJMenuBar(menuBar);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addGap(29, 29, 29)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
												.addGroup(layout.createSequentialGroup()
														.addGap(0, 0, Short.MAX_VALUE)
														.addComponent(bingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
														.addGap(79, 79, 79)
														.addComponent(yahooButtons, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
														.addGap(84, 84, 84)
														.addComponent(askButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
												.addGroup(layout.createSequentialGroup()
														.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																.addComponent(jT_FileToSearch)
																.addComponent(ProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE))
														.addGap(18, 18, 18)
														.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
																.addComponent(jB_Download, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
																.addComponent(jB_clear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
										.addGap(51, 51, 51))
								.addGroup(layout.createSequentialGroup()
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
												.addComponent(googleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addGroup(layout.createSequentialGroup()
														.addComponent(jC_pdf)
														.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
														.addComponent(jC_xls)))
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(jC_doc)
										.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addGap(44, 44, 44)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
								.addComponent(yahooButtons, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(googleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
								.addComponent(bingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(askButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
						.addGap(27, 27, 27)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jC_pdf)
								.addComponent(jC_xls)
								.addComponent(jC_doc))
						.addGap(21, 21, 21)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(jT_FileToSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(jB_clear))
						.addGap(31, 31, 31)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
								.addComponent(jB_Download, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(ProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
						.addContainerGap(42, Short.MAX_VALUE))
				);

		pack();
	}

	@SuppressWarnings("deprecation")
	private void jB_DownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_DownloadActionPerformed
		crawler = Crawler.createCrawler(googleButton.isSelected(),bingButton.isSelected(),yahooButtons.isSelected(),askButton.isSelected());
		UIManager.put("nimbusOrange", Color.GREEN);

		visit(DB.createDB());//visit the URLs DB 

		cheackT = new Thread() {
			public void run() {
				while (true) {
					if (!crawlerT.isAlive()) {
						jB_Download.setText("Download");
						jB_Download.setBackground(Color.GREEN);
						// ProgressBar.setValue(0);
						break;
					}
					try {
						Thread.sleep(500);
					} catch (Exception e) {

					}
				}
			}
		};

		if (jB_Download.getText().equals("Download")) {
			stop = false;
			DB.createDB().removeAllDB();
			jB_Download.setText("Stop");
			jB_Download.setBackground(Color.RED);
			crawlerT.start();
			cheackT.start();

		} else {
			jB_Download.setText("Download");
			jB_Download.setBackground(Color.GREEN);
			crawlerT.stop();
			stop = true;
			crawlerT.destroy();
			cheackT.stop();
		}


	}//GEN-LAST:event_jB_DownloadActionPerformed

	private void jC_pdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jC_pdfActionPerformed

		if (jC_pdf.isSelected()) {
			jC_xls.setSelected(false);
			jC_doc.setSelected(false);
		}

	}//GEN-LAST:event_jC_pdfActionPerformed

	private void jC_docActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jC_docActionPerformed
		if (jC_doc.isSelected()) {
			jC_xls.setSelected(false);
			jC_pdf.setSelected(false);
		}
	}//GEN-LAST:event_jC_docActionPerformed

	private void jC_xlsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jC_xlsActionPerformed
		if (jC_xls.isSelected()) {
			jC_pdf.setSelected(false);
			jC_doc.setSelected(false);
		}
	}//GEN-LAST:event_jC_xlsActionPerformed

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

		jT_FileToSearch.setText("");

	}//GEN-LAST:event_jButton1ActionPerformed




	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(Project.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(Project.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(Project.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(Project.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new Project().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JProgressBar ProgressBar;
	private javax.swing.JButton jB_Download;
	private javax.swing.JButton jB_clear;
	private javax.swing.JCheckBox jC_doc;
	private javax.swing.JCheckBox jC_pdf;
	private javax.swing.JCheckBox jC_xls;
	private javax.swing.JMenu jMenuFileTable;
	private javax.swing.JMenuBar menuBar;
	private javax.swing.JTextField jT_FileToSearch;
	private AskButton askButton ;
	private BingButton bingButton;
	private GoogleButton googleButton;
	private YahooButtons yahooButtons;
	private FileTable fileTable;
	HashMap<String,Command> components;

	// End of variables declaration//GEN-END:variables

	@Override
	public void visit(DB db) {

		crawlerT = new Thread() {
            boolean DBIsFull = true;
			public void run() {
				if(!jT_FileToSearch.getText().equals("")) {
					if (jC_pdf.isSelected()) {
						crawler.getURLs(jT_FileToSearch.getText().toString(), "pdf");
					} else if (jC_doc.isSelected()) {
						crawler.getURLs(jT_FileToSearch.getText().toString(), "doc");
					} else if (jC_xls.isSelected()) {
						crawler.getURLs(jT_FileToSearch.getText().toString(), "xls");
					}
				}
				ProgressBar.setMaximum(DB.createDB().getDB().size());
				ProgressBar.setStringPainted(true);

				int i = 1;
				if(DBIsFull) { //start download after all engine finish
				for (Entry<String, JProgressBar> e : DB.createDB().getDB().entrySet()) {

					String url = e.getKey();

					String folder = jT_FileToSearch.getText().toString();
					
					Download.download(url, folder,e.getValue());
					
					ProgressBar.setValue(i);
					i++;
					if (stop) {
						break;
					}
				}
				
				ProgressBar.setValue(0);
				}
			}

		};	
	}

	@Override
	public void update(boolean dbIsFull) {
		this.dbIsFull=dbIsFull;
		
	}
}
